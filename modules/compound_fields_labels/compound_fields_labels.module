<?php
/**
 * @file
 *
 */

/**
 * Implements hook_field_info().
 */
function compound_fields_labels_field_info() {
  return array(
    'text_long_text' => array(
      'label' => t('Combo: Text-Long Text'),
      'description' => t('This field stores a simple text field and a long text value together. Like a name value pair.'),
      'settings' => array(
        'text_max_length' => 255,
      ),
      'instance_settings' => array(
        'text_label' => 'Text',
        'long_text_label' => 'Long Text',
      ),
      'default_widget' => 'text_long_text_widget',
      'default_formatter' => 'text_long_text_default',
      'property_type' => 'text_long_text',
      'property_callbacks' => array('_text_long_text_property_info_callback'),
    ),
    'text_text' => array(
      'label' => t('Combo: Text Text'),
      'description' => t('This field stores 2 simple text fields'),
      'settings' => array(
        'text_max_length' => 255,
        'text2_max_length' => 255,
      ),
      'instance_settings' => array(
        'text_label' => 'Text',
        'text2_label' => 'Text',
      ),
      'default_widget' => 'text_text_widget',
      'default_formatter' => 'text_text_default',
      'property_type' => 'text_text',
      'property_callbacks' => array('_text_text_property_info_callback'),
    ),
  );
}

/**
 * Property callbacks function for text_long_text field type.
 */
function _text_long_text_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);

  $property['property info']['text_value'] = array(
    'type' => 'text',
    'label' => t('Text'),
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
  );

  $property['property info']['longtext_value'] = array(
    'type' => 'text',
    'label' => t('Long Text'),
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
  );

  $property['property info']['longtext_format'] = array(
    'type' => 'token',
    'label' => t('Long Text Format'),
    'options list' => 'entity_metadata_field_text_formats',
  );
}

/**
 * Property callbacks function for text_text field type.
 */
function _text_text_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);

  $property['property info']['text_value'] = array(
    'type' => 'text',
    'label' => t('Text'),
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
  );
  $property['property info']['text2_value'] = array(
    'type' => 'text',
    'label' => t('Text'),
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
  );
}

/**
 * Implements hook_field_instance_settings_form().
 */
function compound_fields_labels_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  switch ($field['type']) {
    case 'text_long_text':
      $form['text_label'] = array(
        '#type' => 'textfield',
        '#title' => t('Text field label'),
        '#default_value' => $settings['text_label'],
        '#required' => FALSE,
        '#description' => t('The label for the text field.'),
      );
      $form['long_text_label'] = array(
        '#type' => 'textfield',
        '#title' => t('Long Text field label'),
        '#default_value' => $settings['long_text_label'],
        '#required' => FALSE,
        '#description' => t('The label for the Long text.'),
      );

      break;
    case 'text_text':
      $form['text_label'] = array(
        '#type' => 'textfield',
        '#title' => t('Text field label'),
        '#default_value' => $settings['text_label'],
        '#required' => FALSE,
        '#description' => t('The label for the text field.'),
      );
      $form['text2_label'] = array(
        '#type' => 'textfield',
        '#title' => t('Text2 field label'),
        '#default_value' => $settings['text2_label'],
        '#required' => FALSE,
        '#description' => t('The label for the text field.'),
      );

      break;
  }

  return $form;
}

/**
 * Implements hook_field_settings_form().
 */
function compound_fields_labels_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  switch ($field['type']) {
    case 'text_long_text':

      $form['text_max_length'] = array(
        '#type' => 'textfield',
        '#title' => t('Text field maximum length'),
        '#default_value' => $settings['text_max_length'],
        '#required' => FALSE,
        '#element_validate' => array('_element_validate_integer_positive'),
        '#description' => t('The maximum length of the text field in characters.'),
      );
      break;

    case 'text_text':
      $form['text_max_length'] = array(
        '#type' => 'textfield',
        '#title' => t('Text field maximum length'),
        '#default_value' => $settings['text_max_length'],
        '#required' => FALSE,
        '#element_validate' => array('_element_validate_integer_positive'),
        '#description' => t('The maximum length of the text field in characters.'),
      );

      $form['text2_max_length'] = array(
        '#type' => 'textfield',
        '#title' => t('Text2 field maximum length'),
        '#default_value' => $settings['text2_max_length'],
        '#required' => FALSE,
        '#element_validate' => array('_element_validate_integer_positive'),
        '#description' => t('The maximum length of the text field in characters.'),
      );
      break;
  }

  return $form;
}

/**
 * Implements hook_field_validate().
 */
function compound_fields_labels_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

  switch ($field['type']) {
    case 'text_long_text':
      foreach ($items as $delta => $item) {
        if (!empty($item['text_value'])) {
          if (!empty($field['settings']['text_max_length']) && drupal_strlen($item['text_value']) > $field['settings']['text_max_length']) {
            $errors[$field['field_name']][$langcode][$delta][] = array(
              'error' => 'text_max_length',
              'message' => t('%name: the text value may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['text_max_length'])),
            );
          }
        }
      }
      break;
    case 'text_text':
      foreach ($items as $delta => $item) {

      }
      break;
  }
}

/**
 * Implements hook_field_is_empty().
 */
function compound_fields_labels_field_is_empty($item, $field) {
  switch ($field['type']) {
    case 'text_long_text':
      if (empty($item['text_value']) || empty($item['longtext_value'])) {
        return TRUE;
      }
      break;
    case 'text_text':
      if (empty($item['text_value']) && empty($item['text2_value'])) {
        return TRUE;
      }
      break;
  }

  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function compound_fields_labels_field_widget_info() {
  return array(
    'text_long_text_widget' => array(
      'label' => t('Text & Long Text'),
      'field types' => array('text_long_text'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    'text_text_widget' => array(
      'label' => t('Text & Text'),
      'field types' => array('text_text'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function compound_fields_labels_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element = array();
  $instance_settings = $instance['settings'];

  switch ($field['type']) {
    case 'text_long_text':
      $element['text_value'] = array(
        '#type' => 'textfield',
        '#title' => check_plain($instance_settings['text_label']),
        '#default_value' => isset($items[$delta]['text_value'])? $items[$delta]['text_value'] : '',
        '#weight' => -50,
      );

      $element['longtext_value'] = array(
        '#type' => 'text_format',
        '#title' => check_plain($instance_settings['long_text_label']),
        '#default_value' => isset($items[$delta]['longtext_value'])? $items[$delta]['longtext_value'] : '',
        '#format' => isset($items[$delta]['longtext_format'])? $items[$delta]['longtext_format'] : 'full_html',
        '#weight' => -49,
      );
      break;
    case 'text_text':
      $element['text_value'] = array(
        '#type' => 'textfield',
        '#title' => check_plain($instance_settings['text_label']),
        '#default_value' => isset($items[$delta]['text_value'])? $items[$delta]['text_value'] : '',
        '#weight' => -50,
      );

      $element['text2_value'] = array(
        '#type' => 'textfield',
        '#title' => check_plain($instance_settings['text2_label']),
        '#default_value' => isset($items[$delta]['text2_value'])? $items[$delta]['text2_value'] : '',
        '#weight' => -50,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_presave().
 */
function compound_fields_labels_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'text_long_text') {
    foreach ($items as $delta => $item) {
      if (is_array($item['longtext_value']) && isset($item['longtext_value']['value']) && isset($item['longtext_value']['format'])) {
        $items[$delta]['longtext_format'] = $item['longtext_value']['format'];
        $items[$delta]['longtext_value'] = $item['longtext_value']['value'];
      }
    }
  }
}

/**
 * Implements hook_field_load().
 */
function compound_fields_labels_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {

  switch ($field['type']) {
    case 'text_long_text':
      // Get Safe value of filtered text.
      foreach ($entities as $id => $entity) {
        foreach ($items[$id] as $delta => $item) {
          $items[$id][$delta]['safe_longtext_value'] = '';
          if (filter_format_allowcache($item['longtext_format'])) {
            $items[$id][$delta]['safe_longtext_value'] = check_markup($item['longtext_value'], $item['longtext_format'], $langcode);
          }
        }
      }
      break;
  }
}


/**
 * Implements hook_field_formatter_info().
 */
function compound_fields_labels_field_formatter_info() {
  return array(
    'text_long_text_default' => array(
      'label' => t('Default'),
      'description' => 'Display default values for all items',
      'field types' => array('text_long_text'),
      'settings' => array(
        'text_wrapper' => 'h3',
        'text_classes' => '',
        'long_text_wrapper' => 'div',
        'long_text_classes' => '',
      ),
    ),
    'text_text_default' => array(
      'label' => t('Default'),
      'description' => 'Display default values for all items',
      'field types' => array('text_text'),
      'settings' => array(
        'text_wrapper' => 'div',
        'text_classes' => '',
        'text2_wrapper' => 'div',
        'text2_classes' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function compound_fields_labels_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
  case 'text_long_text_default':
    $element = array(
      'text_wrapper' => array(
        '#type' => 'select',
        '#title' => t('Text HTML Wrapper'),
        '#options' => array(
          'h2' => 'H2',
          'h3' => 'H3',
          'h4' => 'H4',
          'h5' => 'H5',
          'h6' => 'H6',
          'span' => 'span',
          'div' => 'div',
        ),
        '#default_value' => $settings['text_wrapper'],
      ),
      'text_classes' => array(
        '#type' => 'textfield',
        '#title' => t('Classes to add to the Text wrapper'),
        '#default_value' => $settings['text_classes'],
        '#field_prefix' => 'class="',
        '#field_suffix' => '"',
      ),
      'long_text_wrapper' => array(
        '#type' => 'select',
        '#title' => t('Long Text HTML Wrapper'),
        '#options' => array(
          'div' => 'div',
          'span' => 'span',
          '' => '-No wrapper-',
        ),
        '#default_value' => $settings['long_text_wrapper'],
      ),
      'long_text_classes' => array(
        '#type' => 'textfield',
        '#title' => t('Classes to add to the Long Text wrapper'),
        '#default_value' => $settings['long_text_classes'],
        '#field_prefix' => 'class="',
        '#field_suffix' => '"',
      ),
    );
    break;
  case 'text_text_default':
    $element = array(
      'text_wrapper' => array(
        '#type' => 'select',
        '#title' => t('Text HTML Wrapper'),
        '#options' => array(
          'h2' => 'H2',
          'h3' => 'H3',
          'h4' => 'H4',
          'h5' => 'H5',
          'h6' => 'H6',
          'span' => 'span',
          'div' => 'div',
        ),
        '#default_value' => $settings['text_wrapper'],
      ),
      'text_classes' => array(
        '#type' => 'textfield',
        '#title' => t('Classes to add to the Text wrapper'),
        '#default_value' => $settings['text_classes'],
        '#field_prefix' => 'class="',
        '#field_suffix' => '"',
      ),
      'text2_wrapper' => array(
        '#type' => 'select',
        '#title' => t('Text HTML Wrapper'),
        '#options' => array(
          'h2' => 'H2',
          'h3' => 'H3',
          'h4' => 'H4',
          'h5' => 'H5',
          'h6' => 'H6',
          'span' => 'span',
          'div' => 'div',
        ),
        '#default_value' => $settings['text2_wrapper'],
      ),
      'text2_classes' => array(
        '#type' => 'textfield',
        '#title' => t('Classes to add to the Text wrapper'),
        '#default_value' => $settings['text2_classes'],
        '#field_prefix' => 'class="',
        '#field_suffix' => '"',
      ),

    );
    break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function compound_fields_labels_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';

  switch ($display['type']) {
  case 'text_long_text_default':
    $summary_array = array();
    $summary_array[] = 'Text HTML Wrapper: ' . $settings['text_wrapper'];
    if (!empty($settings['text_classes'])) {
      $summary_array[] = 'Text Wrapper Classes: ' . $settings['text_classes'];
    }
    $summary_array[] = 'Long Text HTML Wrapper: ' . $settings['long_text_wrapper'];
    if (!empty($settings['long_text_classes'])) {
      $summary_array[] = 'Long Text Wrapper Classes: ' . $settings['long_text_classes'];
    }

    $summary = implode('<br>', $summary_array);

    break;
  case 'text_text':
    $summary_array = array();
    $summary_array[] = 'Text HTML Wrapper: ' . $settings['text_wrapper'];
    if (!empty($settings['text_classes'])) {
      $summary_array[] = 'Text Wrapper Classes: ' . $settings['text_classes'];
    }
    $summary_array[] = 'Text2 HTML Wrapper: ' . $settings['text2_wrapper'];
    if (!empty($settings['text_classes'])) {
      $summary_array[] = 'Text2 Wrapper Classes: ' . $settings['text2_classes'];
    }

    $summary = implode('<br>', $summary_array);
    break;
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function compound_fields_labels_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'text_long_text_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'text_long_text_default_display',
          '#item' => $item + array('settings' => $settings),
        );
      }
      break;
    case 'text_text_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'text_text_default_display',
          '#item' => $item + array('settings' => $settings),
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function compound_fields_labels_theme($existing, $type, $theme, $path) {
  return array(
    'text_long_text_default_display' => array(
      'render element' => 'item',
    ),
    'text_text_default_display' => array(
      'render element' => 'item',
    ),
  );
}

/**
 * Theme function for text_long_text.
 */
function theme_text_long_text_default_display($vars) {
  $field = $vars['item']['#item'];
  $settings = $vars['item']['#item']['settings'];

  $str = '';

  // Build Text.
  $str .= '<' . $settings['text_wrapper'];
  if (!empty($settings['text_classes'])) {
    $str .= ' class="' . $settings['text_classes'] . '"';
  }
  $str .= '>';
  $str .= $field['text_value'];
  $str .= '</' . $settings['text_wrapper'] . '>';

  // Build Long Text.
  $str .= '<' . $settings['long_text_wrapper'];
  if (!empty($settings['long_text_classes'])) {
    $str .= ' class="' . $settings['long_text_classes'] . '"';
  }
  $str .= '>';
  $str .= $field['safe_longtext_value'];
  $str .= '</' . $settings['long_text_wrapper'] . '>';

  return $str;
}

/**
 * Theme function for text_text.
 */
function theme_text_text_default_display($vars) {
  $field = $vars['item']['#item'];
  $settings = $vars['item']['#item']['settings'];

  $str = '';

  // Build Text.
  $str .= '<' . $settings['text_wrapper'];
  if (!empty($settings['text_classes'])) {
    $str .= ' class="' . $settings['text_classes'] . '"';
  }
  $str .= '>';
  $str .= $field['text_value'];
  $str .= '</' . $settings['text_wrapper'] . '>';


  // Build Text2.
  $str .= '<' . $settings['text2_wrapper'];
  if (!empty($settings['text2_classes'])) {
    $str .= ' class="' . $settings['text2_classes'] . '"';
  }
  $str .= '>';
  $str .= $field['text2_value'];
  $str .= '</' . $settings['text_wrapper'] . '>';

  return $str;
}

